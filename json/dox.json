{
    "gulptasks": [
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "taskName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Array"
                    ],
                    "name": "rows",
                    "description": "file content"
                }
            ],
            "description": {
                "full": "Generate *ignore* files\n\nUse instead of *createTaskGenerateFile* cause *.npmignore* and *.gitignore* \ncannot be stored as raw files.\n\nFiles will not be overwritten.\n",
                "summary": "Generate *ignore* files",
                "body": "Use instead of *createTaskGenerateFile* cause *.npmignore* and *.gitignore* \ncannot be stored as raw files.\n\nFiles will not be overwritten.\n"
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskGenerateIgnoreFile (gulp, taskName, rows) {\n  var fileName = '.' + taskName\n\n  if (fs.existsSync(fileName))\n    gulp.task(taskName, emptyTask)\n  else\n    gulp.task(taskName, function (next) {\n      var footer = ['# end of', thisPkg.name, 'stuff'].join(' ') .concat(\"\\n\")\n        , header = ['# generated by', thisPkg.name, thisPkg.version].join(' ')\n\n      var content = [header, rows.join(\"\\n\"), footer].join(\"\\n\")\n\n      writeFileContent(fileName, content)\n\n      next()\n    })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskGenerateIgnoreFile",
                "string": "createTaskGenerateIgnoreFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "taskName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "fileName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "pkg",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "config",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Boolean"
                    ],
                    "name": "touch",
                    "description": "do not overwrite file"
                }
            ],
            "description": {
                "full": "Render files from template",
                "summary": "Render files from template",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskGenerateFile (gulp, fileName, pkg, config, touch) {\n  // Create an empty task if fileName already exists\n  if (touch && fs.existsSync(fileName))\n    return gulp.task(fileName, emptyTask)\n\n  // TODO if pkg is private do not add version (first) badge\n  var badges = [\n        '[![NPM version](https://badge.fury.io/js/<%= pkg.name %>.png)](http://badge.fury.io/js/<%= pkg.name %>)'\n      , '[![Build Status](https://travis-ci.org/<%= pkg.author %>/<%= pkg.name %>.png?branch=master)](https://travis-ci.org/<%= pkg.author %>/<%= pkg.name %>.png?branch=master)'\n      , '[![Dependency Status](https://gemnasium.com/<%= pkg.author %>/<%= pkg.name %>.png)](https://gemnasium.com/<%= pkg.author %>/<%= pkg.name %>)'\n      , '[![Stories in Ready](https://badge.waffle.io/<%= pkg.author %>/<%= pkg.name %>.png?label=ready&title=Ready)](https://waffle.io/<%= pkg.author %>/<%= pkg.name %>)'\n      ]\n    , taskName = fileName\n    , templateData = {\n        bootstrap: {\n          cdn: '//netdna.bootstrapcdn.com/bootstrap/3.1.1/'\n        }\n      , dox: {}\n      , docs: {}\n      , my : {}\n      , pkg: pkg\n      , readme: {}\n      }\n\n  templateData.my.filename = path.basename(fileName)\n\n  templateData.badges = _.template(badges.join(' '), templateData)\n  if (fs.existsSync('./README.md'))\n    templateData.readme.md = readFileContent('./README.md')\n  else\n    templateData.readme.md = _.template(readFileContent(path.join(rootDir, 'README.md')), templateData)\n\n  templateData.readme.html = marked(templateData.readme.md)\n\n  templateData.docs.header = _.template(readFileContent(path.join(rootDir, 'docs', '_header.html')), templateData)\n  templateData.docs.footer = _.template(readFileContent(path.join(rootDir, 'docs', '_footer.html')), templateData)\n\n  if (fs.existsSync(config.tasks.dox.outputfile))\n    templateData.dox = JSON.parse(readFileContent(config.tasks.dox.outputfile))\n\n  gulp.task(taskName, function () {\n     var dest = path.dirname(fileName)\n       , src  = path.join(rootDir, fileName)\n\n     return gulp.src(src)\n                .pipe(gtemplate(templateData))\n                .pipe(gulp.dest(dest))\n  })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskGenerateFile",
                "string": "createTaskGenerateFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "description": ""
                },
                {
                    "type": "return",
                    "types": [
                        "String"
                    ],
                    "description": "fileContent"
                }
            ],
            "description": {
                "full": "Get content from file\n",
                "summary": "Get content from file\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function readFileContent (path) {\n  var fileContent\n\n  try {\n    fileContent = fs.readFileSync(path, {encoding: 'utf8'})\n  }\n  catch (err) { throw err }\n\n  return fileContent\n}",
            "ctx": {
                "type": "function",
                "name": "readFileContent",
                "string": "readFileContent()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "filePath",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "fileContent",
                    "description": ""
                }
            ],
            "description": {
                "full": "Write content to file\n",
                "summary": "Write content to file\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function writeFileContent (filePath, fileContent) {\n    try {\n      mkdirp(path.dirname(filePath))\n      fs.writeFileSync(filePath, fileContent, {encoding: 'utf8'})\n    }\n    catch (err) { throw err }\n}",
            "ctx": {
                "type": "function",
                "name": "writeFileContent",
                "string": "writeFileContent()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "source",
                    "description": "/path/to/input/file.js"
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "doxObj"
                }
            ],
            "description": {
                "full": "Parse source comments with dox\n",
                "summary": "Parse source comments with dox\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function doxParse (source) {\n  gutil.log('doxParse ' + source)\n\n  var doxObj\n    , doxOptions = {debug: false, raw: true}\n    , fileContent = readFileContent(source)\n\n  doxObj = dox.parseComments(fileContent, doxOptions)\n\n  return doxObj\n}",
            "ctx": {
                "type": "function",
                "name": "doxParse",
                "string": "doxParse()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "command",
                    "description": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "execChild"
                }
            ],
            "description": {
                "full": "Executes given command\n\n```\nexecCommand('npm install')()\n```\n",
                "summary": "Executes given command",
                "body": "```\nexecCommand('npm install')()\n```\n"
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function execCommand (command) {\n  return function execChild (next) {\n    var child = exec(command)\n\n    gutil.log(command)\n\n    child.stderr.pipe(process.stderr)\n    child.stdout.pipe(process.stdout)\n\n    next()\n  }\n}",
            "ctx": {
                "type": "function",
                "name": "execCommand",
                "string": "execCommand()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "pkg",
                    "description": "object from package.json"
                }
            ],
            "description": {
                "full": "Create gulp tasks\n",
                "summary": "Create gulp tasks\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "s')\n               .pipe(gmocha({reporter: conf.reporter}))\n  })\n\n  createTaskGenerateIgnoreFile(gulp, 'npmignore', config.tasks.npmignore)\n\n  gulp.task('npminstall', execCommand(config.tasks.npminstall))\n\n  gulp.task('packagejson', function (next) {\n    var conf = config.tasks.packagejson\n\n    pkg.homepage = 'http://www.g14n.info/' + pkg.name\n\n    pkg.license = [ conf.license ]\n\n    pkg.scripts.test = conf.scripts.test\n\n    writeFileContent('./package.json', JSON.stringify(pkg, null, 2))\n\n    next()\n  })\n\n  var macroTasks = ['dev', 'deploy' ,'setup' , 'test']\n\n  macroTasks.forEach(function(taskName) {\n    var deps = config.tasks[taskName].deps || []\n\n    gulp.task(taskName, deps, emptyTask)\n  })\n\n  gulp.task('watch', function () {\n    var conf = config.tasks.watch\n\n    function logFileChanged (event) {\n      gutil.log('File '+event.path+' was '+event.type+', running tasks...')\n    }\n\n    gulp.watch(conf.docs.glob, conf.docs.tasks)\n        .on('change', logFileChanged)\n\n    gulp.watch(conf.readme.glob, conf.readme.tasks)\n        .on('change', logFileChanged)\n\n    gulp.watch(conf.src.glob, conf.src.tasks)\n        .on('change', logFileChanged)\n  })\n}\n\nmodule.exports = gulptasks"
        }
    ]
}