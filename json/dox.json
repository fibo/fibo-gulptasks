{
    "gulptasks": [
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "taskName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Array"
                    ],
                    "name": "rows",
                    "description": "<p>file content</p>\n"
                }
            ],
            "description": {
                "full": "<p>Generate <em>ignore</em> files</p>\n<p>Use instead of <em>createTaskGenerateFile</em> cause <em>.npmignore</em> and <em>.gitignore</em> \ncannot be stored as raw files.</p>\n<p>Files will not be overwritten.</p>\n",
                "summary": "<p>Generate <em>ignore</em> files</p>\n",
                "body": "<p>Use instead of <em>createTaskGenerateFile</em> cause <em>.npmignore</em> and <em>.gitignore</em> \ncannot be stored as raw files.</p>\n<p>Files will not be overwritten.</p>\n"
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskGenerateIgnoreFile (gulp, taskName, rows) {\n  var fileName = '.' + taskName\n\n  if (fs.existsSync(fileName))\n    gulp.task(taskName, emptyTask)\n  else\n    gulp.task(taskName, function (next) {\n      var footer = ['# end of', thisPkg.name, 'stuff'].join(' ') .concat(\"\\n\")\n        , header = ['# generated by', thisPkg.name, thisPkg.version].join(' ')\n\n      var content = [header, rows.join(\"\\n\"), footer].join(\"\\n\")\n\n      writeFileContent(fileName, content)\n\n      next()\n    })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskGenerateIgnoreFile",
                "string": "createTaskGenerateIgnoreFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "taskName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "fileName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "pkg",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "config",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Boolean"
                    ],
                    "name": "touch",
                    "description": "<p>do not overwrite file</p>\n"
                }
            ],
            "description": {
                "full": "<p>Render files from template</p>\n",
                "summary": "<p>Render files from template</p>\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskGenerateFile (gulp, fileName, pkg, config, touch) {\n  // Create an empty task if fileName already exists\n  if (touch && fs.existsSync(fileName))\n    return gulp.task(fileName, emptyTask)\n\n  // TODO if pkg is private do not add version (first) badge\n  // TODO ## Template section in config.md\n  var badges = [\n        '[![NPM version](https://badge.fury.io/js/<%= pkg.name %>.png)](http://badge.fury.io/js/<%= pkg.name %>)'\n      , '[![Build Status](https://travis-ci.org/<%= pkg.author.name %>/<%= pkg.name %>.png?branch=master)](https://travis-ci.org/<%= pkg.author.name %>/<%= pkg.name %>.png?branch=master)'\n      , '[![Dependency Status](https://gemnasium.com/<%= pkg.author.name %>/<%= pkg.name %>.png)](https://gemnasium.com/<%= pkg.author.name %>/<%= pkg.name %>)'\n      , '[![Stories in Ready](https://badge.waffle.io/<%= pkg.author.name %>/<%= pkg.name %>.png?label=ready&title=Ready)](https://waffle.io/<%= pkg.author.name %>/<%= pkg.name %>)'\n      ]\n    , taskName = fileName\n    , templateData = {\n        bootstrap: {\n          cdn: '//netdna.bootstrapcdn.com/bootstrap/3.1.1/'\n        }\n      , dox: {}\n      , docs: {}\n      , meta: {\n          keywords: ['Casati', 'Gianluca', 'fibo']\n        }\n      , my : {}\n      , pkg: pkg\n      , readme: {}\n      }\n\n  if (pkg.keywords)\n    templateData.meta.keywords = pkg.keywords\n\n  templateData.my.filename = path.basename(fileName)\n\n  templateData.badges = _.template(badges.join(' '), templateData)\n\n  if (fs.existsSync('./README.md'))\n    templateData.readme.md = readFileContent('./README.md')\n  else\n    templateData.readme.md = _.template(readFileContent(path.join(rootDir, 'README.md')), templateData)\n\n  templateData.readme.html = marked(templateData.readme.md)\n\n  templateData.docs.header = _.template(readFileContent(path.join(rootDir, 'docs', '_header.html')), templateData)\n  templateData.docs.footer = _.template(readFileContent(path.join(rootDir, 'docs', '_footer.html')), templateData)\n\n  if (fs.existsSync(config.tasks.dox.outputfile))\n    templateData.dox = JSON.parse(readFileContent(config.tasks.dox.outputfile))\n\n  gulp.task(taskName, function () {\n     var dest = path.dirname(fileName)\n       , src  = path.join(rootDir, fileName)\n\n     return gulp.src(src)\n                .pipe(gtemplate(templateData))\n                .pipe(gulp.dest(dest))\n  })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskGenerateFile",
                "string": "createTaskGenerateFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "description": ""
                },
                {
                    "type": "return",
                    "types": [
                        "String"
                    ],
                    "description": "<p>fileContent</p>\n"
                }
            ],
            "description": {
                "full": "<p>Get content from file</p>\n",
                "summary": "<p>Get content from file</p>\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function readFileContent (path) {\n  var fileContent\n\n  try {\n    fileContent = fs.readFileSync(path, {encoding: 'utf8'})\n  }\n  catch (err) { throw err }\n\n  return fileContent\n}",
            "ctx": {
                "type": "function",
                "name": "readFileContent",
                "string": "readFileContent()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "filePath",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "fileContent",
                    "description": ""
                }
            ],
            "description": {
                "full": "<p>Write content to file</p>\n",
                "summary": "<p>Write content to file</p>\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function writeFileContent (filePath, fileContent) {\n    try {\n      mkdirp(path.dirname(filePath))\n      fs.writeFileSync(filePath, fileContent, {encoding: 'utf8'})\n    }\n    catch (err) { throw err }\n}",
            "ctx": {
                "type": "function",
                "name": "writeFileContent",
                "string": "writeFileContent()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "source",
                    "description": "<p>/path/to/input/file.js</p>\n"
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>doxObj</p>\n"
                }
            ],
            "description": {
                "full": "<p>Parse source comments with dox</p>\n",
                "summary": "<p>Parse source comments with dox</p>\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function doxParse (source) {\n  gutil.log('doxParse ' + source)\n\n  var doxObj\n    , doxOptions = {debug: false, raw: true}\n    , fileContent = readFileContent(source)\n\n  doxObj = dox.parseComments(fileContent, doxOptions)\n\n  doxObj.forEach(function (elem, i) {\n    doxObj[i].description.body    = marked(elem.description.body)\n    doxObj[i].description.full    = marked(elem.description.full)\n    doxObj[i].description.summary = marked(elem.description.summary)\n\n    if (elem.tags)\n      elem.tags.forEach(function(tag, j) {\n        if (doxObj[i].tags[j].description)\n          doxObj[i].tags[j].description = marked(doxObj[i].tags[j].description)\n      })\n\n  })\n\n  return doxObj\n}",
            "ctx": {
                "type": "function",
                "name": "doxParse",
                "string": "doxParse()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "command",
                    "description": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "<p>execChild</p>\n"
                }
            ],
            "description": {
                "full": "<p>Executes given command</p>\n<pre><code>execCommand(&#39;npm install&#39;)()\n</code></pre>",
                "summary": "<p>Executes given command</p>\n",
                "body": "<pre><code>execCommand(&#39;npm install&#39;)()\n</code></pre>"
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function execCommand (command) {\n  return function execChild (next) {\n    var child = exec(command)\n\n    gutil.log(command)\n\n    child.stderr.pipe(process.stderr)\n    child.stdout.pipe(process.stdout)\n\n    next()\n  }\n}",
            "ctx": {
                "type": "function",
                "name": "execCommand",
                "string": "execCommand()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": "<p>from <code>require(gulp)</code></p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "pkg",
                    "description": "<p>data from package.json</p>\n"
                }
            ],
            "description": {
                "full": "<p>Create gulp tasks</p>\n<p>Used in <em>gulpfile.js</em>, see <a href=\"./#gulpfile\">how to create gulpfile</a>.</p>\n",
                "summary": "<p>Create gulp tasks</p>\n",
                "body": "<p>Used in <em>gulpfile.js</em>, see <a href=\"./#gulpfile\">how to create gulpfile</a>.</p>\n"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function gulptasks (gulp, pkg) {\n  gulp.task('default', config.tasks.default)\n\n  gulp.task('docsreload', function () {\n     gulp.src(config.tasks.watch.docs.glob)\n         .pipe(gconnect.reload())\n  })\n\n  gulp.task('docsserver', config.tasks.docsserver.deps, function () {\n    var conf = config.tasks.docsserver\n\n    gconnect.server({\n      root: conf.root,\n      livereload: true\n    })\n  })\n\n  gulp.task('dox', config.tasks.dox.deps, function (next) {\n    var conf    = config.tasks.dox\n      , doxData = {}\n      , srcDir  = 'src'\n\n    var files = fs.readdirSync(srcDir)\n\n    files.forEach(function (fileName) {\n      // ignore index.js\n      if (fileName === 'index.js')\n        return\n\n      // All input files should have extension .js\n      var source = path.join(srcDir, fileName)\n      var item = path.basename(fileName, '.js')\n\n      var doxObj = doxParse(source)\n      doxData[item] = doxObj\n    })\n\n    writeFileContent(conf.outputfile, JSON.stringify(doxData, null, 4))\n\n    next()\n  })\n\n  config.tasks.touch.files.forEach(function (fileName) {\n    createTaskGenerateFile(gulp, fileName, pkg, config, true)\n  })\n\n  gulp.task('touch', config.tasks.touch.deps.concat(config.tasks.touch.files), emptyTask)\n\n  config.tasks.generatedocs.files.forEach(function (fileName) {\n    createTaskGenerateFile(gulp, fileName, pkg, config, false)\n  })\n\n  gulp.task('generatedocs', config.tasks.generatedocs.deps.concat(config.tasks.generatedocs.files), emptyTask)\n\n  gulp.task('generateignorefiles', config.tasks.generateignorefiles.deps, emptyTask)\n\n  createTaskGenerateIgnoreFile(gulp, 'gitignore', config.tasks.gitignore)\n\n  gulp.task('githubpages', execCommand(config.tasks.githubpages))\n\n  gulp.task('gitpull', execCommand(config.tasks.gitpull))\n\n  gulp.task('gitpush', execCommand(config.tasks.gitpush))\n\n  gulp.task('jshint', function () {\n    return gulp.src(config.tasks.watch.src.glob)\n               .pipe(jshint())\n               .pipe(jshint.reporter('default'))\n  })\n\n  gulp.task('mocha', function () {\n    var conf = config.tasks.mocha\n\n    return gulp.src(config.tasks.watch.test.glob)\n               .pipe(gmocha({reporter: conf.reporter}))\n  })\n\n  createTaskGenerateIgnoreFile(gulp, 'npmignore', config.tasks.npmignore)\n\n  gulp.task('npminstall', execCommand(config.tasks.npminstall))\n\n  gulp.task('packagejson', function (next) {\n    var conf = config.tasks.packagejson\n\n    pkg.author = config.author\n\n    pkg.homepage = config.author.url + '/' + pkg.name\n\n    pkg.license = [ conf.license ]\n\n    pkg.scripts.test = conf.scripts.test\n\n    writeFileContent('./package.json', JSON.stringify(pkg, null, 2))\n\n    next()\n  })\n\n  var macroTasks = ['dev', 'deploy' ,'setup' , 'test']\n\n  macroTasks.forEach(function(taskName) {\n    var deps = config.tasks[taskName].deps || []\n\n    gulp.task(taskName, deps, emptyTask)\n  })\n\n  gulp.task('watch', function () {\n    var conf = config.tasks.watch\n\n    function logFileChanged (event) {\n      gutil.log('File '+event.path+' was '+event.type+', running tasks...')\n    }\n\n    gulp.watch(conf.docs.glob, conf.docs.tasks)\n        .on('change', logFileChanged)\n\n    gulp.watch(conf.readme.glob, conf.readme.tasks)\n        .on('change', logFileChanged)\n\n    gulp.watch(conf.src.glob, conf.src.tasks)\n        .on('change', logFileChanged)\n\n    gulp.watch(conf.test.glob, conf.test.tasks)\n        .on('change', logFileChanged)\n  })\n}\n\nmodule.exports = gulptasks",
            "ctx": {
                "type": "function",
                "name": "gulptasks",
                "string": "gulptasks()"
            }
        }
    ]
}