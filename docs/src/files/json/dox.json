{
    "gulptasks": [
        {
            "tags": [],
            "description": {
                "full": "Relative paths",
                "summary": "Relative paths",
                "body": ""
            },
            "ignore": true,
            "code": "var baseDir = path.join(__dirname, '..')\nvar configMd  = path.join(baseDir , 'config.md')\n  , rootDir   = path.join(baseDir , 'root')\n\nvar config = mdconfFromFile(configMd).config\n\nvar readmeContentPath = 'readmeContent.md'",
            "ctx": {
                "type": "declaration",
                "name": "baseDir",
                "value": "path.join(__dirname, '..')",
                "string": "baseDir"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "filename",
                    "description": ""
                },
                {
                    "type": "api",
                    "visibility": "private"
                }
            ],
            "description": {
                "full": "@param {Object} gulp",
                "summary": "@param {Object} gulp",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskCopyFile (gulp, fileName) {\n  gulp.task(fileName, function () {\n     var dest = path.dirname(fileName)\n       , src  = path.join(rootDir, fileName)\n\n     gutil.log('copy ' + src + ' -> ' + dest)\n\n     return gulp.src(src)\n                .pipe(gulp.dest(dest))\n  })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskCopyFile",
                "string": "createTaskCopyFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "fileName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Array"
                    ],
                    "name": "rows",
                    "description": "file content"
                },
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "t",
                    "string": ""
                },
                {
                    "type": "t",
                    "string": ""
                }
            ],
            "description": {
                "full": "Generates a file, use instead of *createTaskCopyFile* if file has a special\nmeaning, like *.npmignore* and *.gitignore* and it cannot be stored as a raw file.\nFiles will not be overwritten.\n",
                "summary": "Generates a file, use instead of *createTaskCopyFile* if file has a special\nmeaning, like *.npmignore* and *.gitignore* and it cannot be stored as a raw file.\nFiles will not be overwritten.\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskGenerateIgnoreFile (gulp, fileName, rows) {\n  if (fs.existsSync(fileName))\n    gulp.task(fileName, [])\n  else\n    gulp.task(fileName, function () {\n      var footer = ['# end of', thisPkg.name, 'stuff'].join(' ') .concat(\"\\n\")\n        , header = ['# generated by', thisPkg.name, thisPkg.version].join(' ')\n\n      var content = [header, rows.join(\"\\n\"), footer].join(\"\\n\")\n\n      fs.writeFileSync(fileName, content, {encoding: 'utf8'})\n    })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskGenerateIgnoreFile",
                "string": "createTaskGenerateIgnoreFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "fileName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "templateData",
                    "description": ""
                },
                {
                    "type": "api",
                    "visibility": "private"
                }
            ],
            "description": {
                "full": "@param {Object} gulp",
                "summary": "@param {Object} gulp",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskRenderTemplate (gulp, fileName, templateData) {\n  gulp.task(fileName, function () {\n     var dest = path.dirname(fileName)\n       , src  = path.join(rootDir, fileName)\n\n     gutil.log('render ' + src + ' -> ' + dest)\n\n     return gulp.src(src)\n                .pipe(template(templateData))\n                .pipe(gulp.dest(dest))\n  })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskRenderTemplate",
                "string": "createTaskRenderTemplate()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "fileName",
                    "description": ""
                },
                {
                    "type": "api",
                    "visibility": "private"
                }
            ],
            "description": {
                "full": "Copies a file **only** if it does not exists.\n",
                "summary": "Copies a file **only** if it does not exists.\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskTouchFile (gulp, fileName) {\n  // Create an empty task if fileName already exists\n  if (fs.existsSync(fileName))\n    gulp.task(fileName, [])\n  else\n    createTaskCopyFile(gulp, fileName)\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskTouchFile",
                "string": "createTaskTouchFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "return",
                    "types": [
                        "doxObj"
                    ],
                    "description": "{Object}"
                },
                {
                    "type": "api",
                    "visibility": "private"
                }
            ],
            "description": {
                "full": "@param source {String} /path/to/input/file.js",
                "summary": "@param source {String} /path/to/input/file.js",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function doxParse (source) {\n  var fileContent\n\n  gutil.log('doxParse ' + source)\n\n  try {\n    fileContent = fs.readFileSync(source, {encoding: 'utf8'})\n  }\n  catch (err) { throw err }\n\n  var doxOptions = {debug: false, raw: true}\n\n  var doxObj = dox.parseComments(fileContent, doxOptions)\n\n  return doxObj\n}",
            "ctx": {
                "type": "function",
                "name": "doxParse",
                "string": "doxParse()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "command",
                    "description": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "execChild"
                }
            ],
            "description": {
                "full": "Executes given command as a child\n\n```\nexecCommand('npm install')()\n```\n",
                "summary": "Executes given command as a child",
                "body": "```\nexecCommand('npm install')()\n```\n"
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function execCommand(command) {\n  return function execChild() {\n    var child = exec(command)\n\n    gutil.log(command)\n\n    child.stderr.pipe(process.stderr)\n  }\n}",
            "ctx": {
                "type": "function",
                "name": "execCommand",
                "string": "execCommand()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "fileName"
                    ],
                    "name": "{String}",
                    "description": "/path/to/file.md"
                },
                {
                    "type": "api",
                    "visibility": "private"
                }
            ],
            "description": {
                "full": "Read configuration parameters from markdown file\n",
                "summary": "Read configuration parameters from markdown file\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function mdconfFromFile (fileName) {\n  var fileContent\n\n  try {\n    fileContent = fs.readFileSync(fileName, {encoding: 'utf8'})\n  }\n  catch (err) { throw err }\n\n  return mdconf(fileContent)\n}",
            "ctx": {
                "type": "function",
                "name": "mdconfFromFile",
                "string": "mdconfFromFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "pkg",
                    "description": "object from package.json"
                }
            ],
            "description": {
                "full": "Create gulp tasks\n",
                "summary": "Create gulp tasks\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function gulptasks (gulp, pkg) {\n  createTaskGenerateIgnoreFile(gulp, '.gitignore', config.tasks['.gitignore'])\n\n  createTaskGenerateIgnoreFile(gulp, '.npmignore', config.tasks['.npmignore'])\n\n  gulp.task('config', function () {\n    console.log(JSON.stringify(config, null, 4))\n  })\n\n  config.tasks.copyfiles.forEach(function (fileName) {\n    createTaskCopyFile(gulp, fileName)\n  })\n\n  gulp.task('copyfiles', config.tasks.copyfiles)\n\n  gulp.task('docs', config.tasks.docs)\n\n  gulp.task('dox', function () {\n    var conf    = config.tasks.dox\n      , doxData = {}\n      , srcDir  = 'src'\n\n    var files = fs.readdirSync(srcDir)\n\n    files.forEach(function (fileName) {\n      // ignore index.js\n      if (fileName === 'index.js')\n        return\n\n      // All input files should have extension .js\n      var source = path.join(srcDir, fileName)\n      var item = path.basename(fileName, '.js')\n\n      var doxObj = doxParse(source)\n      doxData[item] = doxObj\n    })\n\n    try {\n      mkdirp(path.dirname(conf.outputfile))\n      fs.writeFileSync(conf.outputfile, JSON.stringify(doxData, null, 4), {encoding: 'utf8'})\n    }\n    catch (err) { throw err }\n  })\n\n  gulp.task('default', config.tasks.default)\n\n  gulp.task('generatefiles', config.tasks.generatefiles)\n\n  gulp.task('jshint', function () {\n    gulp.src('src",
            "ctx": {
                "type": "function",
                "name": "gulptasks",
                "string": "gulptasks()"
            }
        },
        {
            "tags": [],
            "description": {
                "full": "s')\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n  })\n\n  gulp.task('mkdirs', function () {\n    config.tasks.mkdirs.forEach(function (dir) { mkdirp(dir) })\n  })\n\n  gulp.task('npm_install', function () {\n    execCommand('npm install')()\n  })\n\n  gulp.task('package_json', function () {\n    var conf = config.tasks['package_json']\n\n    pkg.devDependencies = cond.devdependecies\n\n    pkg.homepage = 'http://www.g14n.info/' + pkg.name\n\n    pkg.license = [ conf.license ]\n\n    pkg.scripts.test = conf.scripts.test\n\n    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2), {encoding: 'utf8'})\n  })\n\n  var renderTemplatesConf = config.tasks.rendertemplates\n    , renderTemplatesDeps = ['copyfiles', 'touchfiles']\n\n  renderTemplatesConf.forEach(function (element) {\n    renderTemplatesDeps.push(element)\n  })\n\n  renderTemplatesConf.forEach(function (fileName) {\n    var templateData = {\n      pkg: pkg\n    , readmeContent: '**TODO:** edit file ' + readmeContentPath\n    , readmeContentPath: readmeContentPath\n    }\n\n    fs.readFile(readmeContentPath, {encoding: 'utf8'}, function (err, data) {\n      if (!err)\n        templateData.readmeContent = data\n    })\n\n    createTaskRenderTemplate(gulp, fileName, templateData)\n  })\n\n  gulp.task('rendertemplates', renderTemplatesDeps)\n\n  gulp.task('scaffold', config.tasks.scaffold)\n\n  gulp.task('test', function () {\n    var conf = config.tasks.test\n\n    gulp.src('test/*js')\n        .pipe(gmocha({reporter: conf.reporter}))\n  })\n\n  config.tasks.touchfiles.forEach(function (fileName) {\n    createTaskTouchFile(gulp, fileName)\n  })\n\n  gulp.task('touchfiles', config.tasks.touchfiles)\n}\n\n/*!\nExport",
                "summary": "s')\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n  })",
                "body": "  gulp.task('mkdirs', function () {\n    config.tasks.mkdirs.forEach(function (dir) { mkdirp(dir) })\n  })\n\n  gulp.task('npm_install', function () {\n    execCommand('npm install')()\n  })\n\n  gulp.task('package_json', function () {\n    var conf = config.tasks['package_json']\n\n    pkg.devDependencies = cond.devdependecies\n\n    pkg.homepage = 'http://www.g14n.info/' + pkg.name\n\n    pkg.license = [ conf.license ]\n\n    pkg.scripts.test = conf.scripts.test\n\n    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2), {encoding: 'utf8'})\n  })\n\n  var renderTemplatesConf = config.tasks.rendertemplates\n    , renderTemplatesDeps = ['copyfiles', 'touchfiles']\n\n  renderTemplatesConf.forEach(function (element) {\n    renderTemplatesDeps.push(element)\n  })\n\n  renderTemplatesConf.forEach(function (fileName) {\n    var templateData = {\n      pkg: pkg\n    , readmeContent: '**TODO:** edit file ' + readmeContentPath\n    , readmeContentPath: readmeContentPath\n    }\n\n    fs.readFile(readmeContentPath, {encoding: 'utf8'}, function (err, data) {\n      if (!err)\n        templateData.readmeContent = data\n    })\n\n    createTaskRenderTemplate(gulp, fileName, templateData)\n  })\n\n  gulp.task('rendertemplates', renderTemplatesDeps)\n\n  gulp.task('scaffold', config.tasks.scaffold)\n\n  gulp.task('test', function () {\n    var conf = config.tasks.test\n\n    gulp.src('test/*js')\n        .pipe(gmocha({reporter: conf.reporter}))\n  })\n\n  config.tasks.touchfiles.forEach(function (fileName) {\n    createTaskTouchFile(gulp, fileName)\n  })\n\n  gulp.task('touchfiles', config.tasks.touchfiles)\n}\n\n/*!\nExport"
            },
            "ignore": false,
            "code": "module.exports = gulptasks",
            "ctx": {
                "type": "property",
                "receiver": "module",
                "name": "exports",
                "value": "gulptasks",
                "string": "module.exports"
            }
        }
    ]
}