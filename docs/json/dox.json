{
    "gulptasks": [
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "filename",
                    "description": ""
                }
            ],
            "description": {
                "full": "@api private",
                "summary": "@api private",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function createTaskCopyFile (gulp, fileName) {\n  gulp.task(fileName, function () {\n     var dest = path.dirname(fileName)\n       , src  = path.join(rootDir, fileName)\n\n     gutil.log('copy ' + src + ' -> ' + dest)\n\n     return gulp.src(src)\n                .pipe(gulp.dest(dest))\n  })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskCopyFile",
                "string": "createTaskCopyFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "taskName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Array"
                    ],
                    "name": "rows",
                    "description": "file content"
                }
            ],
            "description": {
                "full": "Generates a file, use instead of *createTaskCopyFile* if file has a special\nmeaning, like *.npmignore* and *.gitignore* and it cannot be stored as a raw file.\nFiles will not be overwritten.\n",
                "summary": "Generates a file, use instead of *createTaskCopyFile* if file has a special\nmeaning, like *.npmignore* and *.gitignore* and it cannot be stored as a raw file.\nFiles will not be overwritten.\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function createTaskGenerateIgnoreFile (gulp, taskName, rows) {\n  var fileName = '.' + taskName\n\n  if (fs.existsSync(fileName))\n    gulp.task(taskName, [])\n  else\n    gulp.task(taskName, function () {\n      var footer = ['# end of', thisPkg.name, 'stuff'].join(' ') .concat(\"\\n\")\n        , header = ['# generated by', thisPkg.name, thisPkg.version].join(' ')\n\n      var content = [header, rows.join(\"\\n\"), footer].join(\"\\n\")\n\n      fs.writeFileSync(fileName, content, {encoding: 'utf8'})\n    })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskGenerateIgnoreFile",
                "string": "createTaskGenerateIgnoreFile()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "fileName",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "templateData",
                    "description": ""
                }
            ],
            "description": {
                "full": "@api private",
                "summary": "@api private",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function createTaskRenderTemplate (gulp, fileName, templateData) {\n  gulp.task(fileName, function () {\n     var dest = path.dirname(fileName)\n       , src  = path.join(rootDir, fileName)\n\n     gutil.log('render ' + src + ' -> ' + dest)\n\n     return gulp.src(src)\n                .pipe(gtemplate(templateData))\n                .pipe(gulp.dest(dest))\n  })\n}",
            "ctx": {
                "type": "function",
                "name": "createTaskRenderTemplate",
                "string": "createTaskRenderTemplate()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "path",
                    "description": ""
                },
                {
                    "type": "return",
                    "types": [
                        "String"
                    ],
                    "description": "fileContent"
                }
            ],
            "description": {
                "full": "Get content from file\n",
                "summary": "Get content from file\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function readFileContent (path) {\n  var fileContent\n\n  try {\n    fileContent = fs.readFileSync(path, {encoding: 'utf8'})\n  }\n  catch (err) { throw err }\n\n  return fileContent\n}",
            "ctx": {
                "type": "function",
                "name": "readFileContent",
                "string": "readFileContent()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "source",
                    "description": "/path/to/input/file.js"
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "doxObj"
                }
            ],
            "description": {
                "full": "@api private",
                "summary": "@api private",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function doxParse (source) {\n  gutil.log('doxParse ' + source)\n\n  var doxObj\n    , doxOptions = {debug: false, raw: true}\n    , fileContent = readFileContent(source)\n\n  doxObj = dox.parseComments(fileContent, doxOptions)\n\n  return doxObj\n}",
            "ctx": {
                "type": "function",
                "name": "doxParse",
                "string": "doxParse()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "command",
                    "description": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "execChild"
                }
            ],
            "description": {
                "full": "Executes given command as a child\n\n```\nexecCommand('npm install')()\n```\n",
                "summary": "Executes given command as a child",
                "body": "```\nexecCommand('npm install')()\n```\n"
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function execCommand(command) {\n  return function execChild() {\n    var child = exec(command)\n\n    gutil.log(command)\n\n    child.stderr.pipe(process.stderr)\n    child.stdout.pipe(process.stdout)\n  }\n}",
            "ctx": {
                "type": "function",
                "name": "execCommand",
                "string": "execCommand()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "gulp",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "pkg",
                    "description": "object from package.json"
                }
            ],
            "description": {
                "full": "Create gulp tasks\n",
                "summary": "Create gulp tasks\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "s')\n        .pipe(jshint())\n        .pipe(jshint.reporter('default'))\n  })\n\n  gulp.task('mkdirs', function () {\n    config.tasks.mkdirs.forEach(function (dir) { mkdirp(dir) })\n  })\n\n  createTaskGenerateIgnoreFile(gulp, 'npmignore', config.tasks.npmignore)\n\n  gulp.task('npminstall', execCommand(config.tasks.npminstall))\n\n  gulp.task('packagejson', function () {\n    var conf = config.tasks.packagejson\n\n    pkg.devDependencies = conf.devdependecies\n\n    pkg.homepage = 'http://www.g14n.info/' + pkg.name\n\n    pkg.license = [ conf.license ]\n\n    pkg.scripts.test = conf.scripts.test\n\n    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2), {encoding: 'utf8'})\n  })\n\n  var renderTemplatesConf = config.tasks.rendertemplates\n    , renderTemplatesDeps = ['copyfiles', 'dox']\n\n  renderTemplatesConf.forEach(function (element) {\n    renderTemplatesDeps.push(element)\n  })\n\n  renderTemplatesConf.forEach(function (fileName) {\n    var templateData = {\n          bootstrap: {\n            cdn: '//netdna.bootstrapcdn.com/bootstrap/3.1.1/'\n          }\n        , dox: {}\n        , pkg: pkg\n        , readmeContent: '**TODO:** edit file ' + readmeContentPath\n        , readmeContentPath: readmeContentPath\n        }\n      , docs = {}\n\n    docs.header = _.template(readFileContent(path.join(rootDir, 'docs', '_header.html')), templateData)\n    docs.footer = _.template(readFileContent(path.join(rootDir, 'docs', '_footer.html')), templateData)\n    gutil.log(docs.header)\n\n    templateData.docs = docs\n\n    if (fs.existsSync(config.tasks.dox.outputfile))\n      templateData.dox = JSON.parse(readFileContent(config.tasks.dox.outputfile))\n\n    fs.readFile(readmeContentPath, {encoding: 'utf8'}, function (err, data) {\n      if (!err)\n        templateData.readmeContent = data\n    })\n\n    createTaskRenderTemplate(gulp, fileName, templateData)\n  })\n\n  gulp.task('rendertemplates', renderTemplatesDeps)\n\n  gulp.task('scaffold', config.tasks.scaffold)\n\n  gulp.task('test', function () {\n    var conf = config.tasks.test\n\n    gulp.src('test/*js')\n        .pipe(gmocha({reporter: conf.reporter}))\n  })\n\n  gulp.task('watch', function () {\n    var conf = config.tasks.watch\n\n    function logFileChanged (event) {\n      gutil.log('File '+event.path+' was '+event.type+', running tasks...')\n    }\n\n    gulp.watch(conf.docs.glob, conf.docs.tasks)\n        .on('change', logFileChanged)\n\n    gulp.watch(conf.src.glob, conf.src.tasks)\n        .on('change', logFileChanged)\n  })\n}\n\nmodule.exports = gulptasks"
        }
    ]
}